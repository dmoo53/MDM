//Check whether Parent is not empty
var check1 = checkString(entry.getEntryAttrib("UCoA DFF Sub Segment/Parent (DFF Estimate Row)"),"");
var rootnode1 = entry.getRootEntryNode();
var node1 = rootnode1.getEntryNode("UCoA DFF Sub Segment/Parent (DFF Estimate Row)");
if (check1=="") 
{
	// fail validation
	node1.throwValidationError("VALIDATION_RULE","DFF Estimate Row cannot be empty");
} 
else
{ 
	//OK
}

	//Check whether Description is not empty
var check2 = checkString(entry.getEntryAttrib("UCoA DFF Sub Segment/Description"),"");
var rootnode2 = entry.getRootEntryNode();
var node2 = rootnode2.getEntryNode("UCoA DFF Sub Segment/Description");
if (check2=="") 
{
	// fail validation
	node2.throwValidationError("VALIDATION_RULE","DFF Estimate Row cannot be empty");
} 
else
{ 
	//OK
}

// validate key format
var rexp3 = buildRE("X\d\d\dA\d\d\d",1);
var Name3 = checkString(entry.getEntryAttrib("UCoA DFF Sub Segment/Key"),"");
var rootnode3 = entry.getRootEntryNode();
var node3 = rootnode3.getEntryNode("UCoA DFF Sub Segment/Key");
var NameAfterRe3 = rexp3.substitute(Name3,"");
if(NameAfterRe3==Name3){
	// fail validation
	node3.throwValidationError("PATTERN","The supplied value does not match the required pattern DdddDddd");
} else { 
	//OK
}