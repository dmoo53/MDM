//---------------------------------------------------------------------
// Adding check for default objects which enables cross locale migration
//---------------------------------------------------------------------

var defaultMessageMap = [];

var CSV_DEFAULT_LKT_HIERARCHY = getStringValueForClassMember("com.ibm.ccd.common.migration.to52.EnvImportExportHelper", "CSV_DEFAULT_LKT_HIERARCHY");//"##DefaultLookupTableHierarchy##";
var CSV_DEFAULT_SPEC = getStringValueForClassMember("com.ibm.ccd.common.migration.to52.EnvImportExportHelper", "CSV_DEFAULT_SPEC");//"##DefaultHierarchyPrimarySpec##";
var CSV_DEFAULT_SPEC_ATTR_NAME = getStringValueForClassMember("com.ibm.ccd.common.migration.to52.EnvImportExportHelper", "CSV_DEFAULT_SPEC_ATTR_NAME");//"##NAME##";
var CSV_DEFAULT_SPEC_ATTR_PATH = getStringValueForClassMember("com.ibm.ccd.common.migration.to52.EnvImportExportHelper", "CSV_DEFAULT_SPEC_ATTR_PATH");//"##PATH##";
var CSV_DEFAULT_SPEC_ATTR_DISPLAYNAME = getStringValueForClassMember("com.ibm.ccd.common.migration.to52.EnvImportExportHelper", "CSV_DEFAULT_SPEC_ATTR_DISPLAYNAME");//"##DISPNAME##";


//Retrive Default Locale object
var getDefaultLocale = createJavaMethod("com.ibm.ccd.common.context.common.LocaleContext","getDefaultLocale");
var defaultLocale = runJavaMethod(null,getDefaultLocale);


//create getMessage method 
var getMessage = createJavaMethod("com.ibm.ccd.common.context.common.LocaleContext","getMessage","java.lang.String","java.util.Locale");

var strvalue = getStringValueForClassMember("com.ibm.ccd.common.util.Const", "DEFAULT_LOOKUP_TABLE_HIERARCHY_NAME_INDEX");
var DEFAULT_LKT_HIERARCHY = runJavaMethod(null,getMessage,strvalue, defaultLocale);
defaultMessageMap[CSV_DEFAULT_LKT_HIERARCHY]=DEFAULT_LKT_HIERARCHY;

strvalue = getStringValueForClassMember("com.ibm.ccd.common.util.Const", "DEFAULT_HIERARCHY_SPEC_NAME_INDEX");
var DEFAULT_SPEC = runJavaMethod(null,getMessage,strvalue, defaultLocale);
defaultMessageMap[CSV_DEFAULT_SPEC]=DEFAULT_SPEC;

strvalue = getStringValueForClassMember("com.ibm.ccd.common.util.Const", "DEFAULT_HIERARCHY_SPEC_PRIMARY_KEY_FIELD_NAME_INDEX");
var DEFAULT_SPEC_ATTR_NAME = runJavaMethod(null,getMessage,strvalue, defaultLocale);
defaultMessageMap[CSV_DEFAULT_SPEC_ATTR_NAME]=DEFAULT_SPEC_ATTR_NAME;

strvalue = getStringValueForClassMember("com.ibm.ccd.common.util.Const", "DEFAULT_HIERARCHY_SPEC_PATH_FIELD_NAME_INDEX");
var DEFAULT_SPEC_ATTR_PATH = runJavaMethod(null,getMessage,strvalue, defaultLocale);
defaultMessageMap[CSV_DEFAULT_SPEC_ATTR_PATH]=DEFAULT_SPEC_ATTR_PATH;

strvalue = getStringValueForClassMember("com.ibm.ccd.common.util.Const", "DEFAULT_HIERARCHY_SPEC_DISPLAY_NAME_FIELD_NAME_INDEX");
var DEFAULT_SPEC_ATTR_DISPLAYNAME = runJavaMethod(null,getMessage,strvalue, defaultLocale);
defaultMessageMap[CSV_DEFAULT_SPEC_ATTR_DISPLAYNAME]=DEFAULT_SPEC_ATTR_DISPLAYNAME;

function replaceCSVDefaults(str,msgMap)
{
  if( (str == null) || (str.indexOf("##") == -1) )
  {
  	return str;
  }
  var key;
  var value;
  forEachHmElement(msgMap, key, value) 
  {
	  str = replaceString(str,key,value);
  }
  
  return str;
}


//------------------------------------------------
// Functions
//------------------------------------------------

// build a hashmap containing all categories from all category trees associated with this catalog so
// that we don't have to get categories one at a time
function getCategoryHashMap(sDelimiter)
{

    // XXX-Wolf-15-dec-Srikanth-NOT_FIXED This is not a good idea
    // XXX-Wolf-15-dec-Srikanth-NOT_FIXED You are going to end up with all the categories in memory at once

    // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED You should do something (report the error, abort) if an error occurs
    var f;
    var hmPathsToCategories;
    catchError (f)
    {
        hmPathsToCategories = [];
        var categoryTreeList = getCtgByName().getCatalogCategoryTrees();
        var key; var categoryTree;
        forEachHmElement(categoryTreeList, key, categoryTree)
        {
            var category_tree_name = categoryTree.getCategoryTreeName();
            out.writeln("Caching category tree [" + category_tree_name + "]");
            if ( categoryTree != null )
            {
            	//Fix for WPC00022249 Root category should be part of hmPathsToCategories otherwise 
            	//for location item it fails to find root category
								var catSet;
								var catObj;
                catSet = categoryTree.getCategorySetByPrimaryKey(category_tree_name,true);
                forEachCategorySetElement(catSet, catObj)
                {
                    hmPathsToCategories[category_tree_name] = catObj;
                    break;
                }
                var categorySet = categoryTree.getCategorySet();
                var oCategory;
                forEachCategorySetElement(categorySet, oCategory)
                {
                    var paths = oCategory.getFullPaths(sDelimiter, true);
                    var key; var path;
                    forEachHmElement(paths, key, path)
                    {
                        hmPathsToCategories[path] = oCategory;
                    }
                }
            }
        }
    }

    if (f != null)
    {
        out.writeln("ERROR building Categories from Hierarchies "+f);
        return null;
    }

    // XXX-Wolf-15-dec-16-jan-Srikanth-FIXED What if it fails?

    return hmPathsToCategories;
}


var delim = "~~~~~";

var ctg = getCtgByName();

var processingOptions = [];
processingOptions[0] = "ALL";
ctg.disableContainerProcessingOptions(processingOptions);

// build map from category path to category object
var hmPathsToCategories = getCategoryHashMap(delim);

// If category hashmap is empty, import is aborted
if (hmPathsToCategories == null)
{
    return null;
}

var my_parser = new CSVParser(in);

var bDone = false;
var lineNumber = 0;
var lineToken = "";
while ( ! bDone )
{
    // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED You should do something (report the error, abort) if an error occurs
    var f;
    catchError (f)
    {
        var item = null;
        var attrs = my_parser.splitLine();
        bDone = (null == attrs);
        if ( ! bDone )
        {
            // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED You should do something (report the error, abort) if an error occurs
            var g;
            catchError (g)
            {
                lineNumber = lineNumber +1;
                var item = new CtgItem();
                // loop over fields setting the appropriate attribute
                // using the name-value pair in each field
                for (var i = 0; i < attrs.size(); i++ )
                {
                    var attr_name_value = attrs[i].parseDelim("|");
                    var attr_name = replaceCSVDefaults(attr_name_value[0],defaultMessageMap);
                    var attr_value = attr_name_value[1];
		    //fix for WPC00031630
		    if(attr_name_value.size() >2)
		    {
			for(escapeCounter=2;escapeCounter<attr_name_value.size();escapeCounter++)
			{
			  attr_value = attr_value+"|"+attr_name_value[escapeCounter];
			}
		    }
		    lineToken = attr_name_value[0]+"|"+attr_name_value[1];
                    if ( null != attr_name && "" != attr_name && null != attr_value )
                    {
                        if ( attr_name == "CATEGORY" )
                        {
                            var category = hmPathsToCategories[replaceCSVDefaults(attr_value,defaultMessageMap)];
                            if ( null != category )
                            {
                                item.mapCtgItemToCategory(category);
                            }
                            else
                            {
                                out.writeln("Could not find category with path [" + attr_value + "]");
                            }
                        }
                        else if ( attr_name == "AVAILABLE_LOC" )
                        {
                            var location = hmPathsToCategories[attr_value];
                            if (location == null)
                            {
                                throwError("Could not find location [" + attr_value + "]");
                            }
                            item.makeItemAvailableInLocation(location);
                        }
                        else if ( attr_value == "RELATIONSHIP_INFO" )
                        {
                            // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED Relationship will have to be handled eventually though
                            // XXX-Srikanth-16-jan Relationships are handled in recursive import.

                            // skip because this can cause circular dependencies - items can be
                            // related to items in the same catalog or catalogs not yet loaded -
                            // this has to be taken care of in a second pass
                        }
                        else
                        {
                            // Determine whether it's a location attribute or global attribute
                            var full_attr_name = attr_name.parseDelim("@");
                            if ( full_attr_name.size() == 1 )
                            {
                                //521 codebase also exports blank value of grouping node.
                                //if you set any value on grouping node then 5.3 codebase complains.
                                //so skipping all grouping node. 
                                var seperatorIndex = attr_name.lastIndexOf("/");
                                var multivalueIndex = attr_name.lastIndexOf("#");
                                if(multivalueIndex > seperatorIndex)
                                {
                                    var tempAttrPath = attr_name.substring(0,multivalueIndex);
                                    var entryNode = item.getRootEntryNode().getEntryNode(tempAttrPath);
                                    if(entryNode != null)
                                    {
                                       node = entryNode.getNodeFromEntryNode();
                                       var type = node.getNodeAttributeValue("TYPE");
                                       if(type == "GROUPING" || ( (type == "LOOKUP_TABLE") && (attr_value == "")) )
                                       {
                                         continue;
                                       }
                                    }
                                }
                                // Global Attribute
                                // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED Did you test with multi-value nodes (attr_name would be something like specname/name#a/name#b)?
                                item.setEntryAttrib(attr_name, attr_value);
                            }
                            else
                            {
                                var attr_path = full_attr_name[0];
                                var location = hmPathsToCategories[full_attr_name[1]];
                                if ( location == null )
                                {
                                    throwError("Could not find location [" + full_attr_name[1] + "]");
                                }
                                if ( attr_value == "" )
                                {
                                    item.setInheriting(location, attr_path, false);
                                }
                                else
                                {
                                    item.setItemLocationAttrib(location, attr_path, attr_value);
                                }
                            }

                            var attr_entry_node = item.getRootEntryNode().getEntryNode(attr_name);
                            if(attr_entry_node != null)
                            {
                                var attr_node_type = attr_entry_node.getNodeFromEntryNode().getNodeAttributeValue("TYPE");
								var multiOccur = (attr_entry_node.getNodeFromEntryNode().getNodeAttributeValue("MAX_OCCURRENCE") > 1);
								if(multiOccur == true && attr_name.contains("#") == false)
								{
									attr_name = attr_name + "#0";
								}                                
                                if(attr_node_type == "DATE")
                                {
                                    //The exported date value is in EEE MMM dd HH:mm:ss zzz yyyy format
                                    // So using parseDate to parse the date value.
                                    // If parsing error occurs, try to use db2 format then oracle format
                                    var en_US = new Locale("en","US");
                                    var defaultFormat = "EEE MMM dd HH:mm:ss zzz yyyy";
                                    var db2Format = "yyyy-MM-dd-HH.mm.ss";
                                    var oracleFormat = "dd-MMM-yyyy HH:mm:ss";                               
                                    var dateValue = parseDate(attr_value,defaultFormat,en_US,false);
                                    if(dateValue == null){
                                       dateValue = parseDate(attr_value,db2Format,en_US,false);
                                    }
                                    if(dateValue == null){
                                       dateValue = parseDate(attr_value,oracleFormat,en_US,false);
                                    }
                                    attr_entry_node.setEntryNodeValue(dateValue);
                                }
                                else if(attr_node_type == "SEQUENCE")
                                {
                                    var node = attr_entry_node.getNodeFromEntryNode() ;
                                    var spec = node.getNodeSpec();
                                    var catname = item.getCatalog().getCtgName();
                                    var specname = spec.getSpecName();
                                    var seqName = catname + "_CTG_" + specname + "/" + node.getNodeName();
				    if(attr_value != "")
				    {
                                    setSequenceValueForMigration(seqName,catname, "CTG", toInteger(attr_value)) ;
				    }
                                    item.setEntryAttrib(attr_name, attr_value);
                                }
				else
                                {
                                    // XXX-Wolf-15-dec-Srikanth-16-jan-FIXED Did you test with multi-value nodes (attr_name would be something like specname/name#a/name#b)?
                                    item.setEntryAttrib(attr_name, attr_value);
                                }
                            }
                        }
                    }
                }
                item.saveCtgItem();
            }

            if (g != null)
            {
				        var exceptionStr = "Error building entries while processing catalog ["+ctg+"] at line number ["+lineNumber+"] for token ["+lineToken+"] with error "+g;
                out.writeln(exceptionStr);
                //return null;
								throwError(exceptionStr);
            }
        }
    }

    if (f != null)
    {
        out.writeln("ERROR parsing CSV file "+f);
        //return null;
	throwError("ERROR parsing CSV file "+f);
    }
}